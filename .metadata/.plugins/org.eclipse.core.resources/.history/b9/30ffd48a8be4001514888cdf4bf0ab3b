package graphs.graphAlgs.matching;

import net.datastructures.*;
import graphs.graphAlgs.EdgeComparator;
import graphs.graphAlgs.VertexDegreeComparator;

import java.awt.geom.Point2D;
import java.util.PriorityQueue;
import java.util.Iterator;

import javax.swing.*;

import java.awt.*;

public class GreedyUnweightedMatchingStatic extends MatchingAlgorithm
{
    public static final Object VERTEX_STATUS = new Object();
    public static final Object EDGE_STATUS = new Object();

	// Values for STATUS decorations
    public static final Object MATCHED = new Object();
    public static final Object FREE = new Object();

    public void runAlgorithm( AdjacencyListGraph<Point2D.Double, Double>  g )
    {
      // Complete the code for the Greedy Algorithm for creating a Matching in a Graph

        // This heap will contain all the edges in the graph
        // We will examine the edges from the least-costly to the most-costly
        PriorityQueue<Vertex> heap = new PriorityQueue<Vertex>(11, new VertexDegreeComparator());

        // decorate all vertices as FREE
        for (Vertex v : g.vertices())
        {
	  v.put (DEGREE, g.degree(v); ---------------------------------------------------new
          v.put (VERTEX_STATUS, FREE);
        }

        //decorate all edges as FREE
        for (Edge e : g.edges())
        {
          e.put (EDGE_STATUS, FREE);
        }
        // If graph is empty, return immediately ------------dont need this
        if ( g.numVertices() == 0 )
        	return;

          //adds all vertices to the heap
          for (Vertex v : g.vertices())
          {
        	  heap.add(v);
          }

          //While heap isn't empty keep polling
          //Define best neighbor so far, degree wise

          int bestSoFar = 250; //lowest Degree will be saved
          int deg = 0;
          int temp =0;
          Vertex bestIncVertex = null; 
          Edge bestEdge = null;

          Vertex currIncVertex = null;
          Edge currInc = null;

          while (!heap.isEmpty())
          {

          Vertex currVertex = heap.poll(); ---------------poll inside the loop
	  bestSoFar = 250;--------------new
	  temp = 0;-----------------new

            for (Edge b : g.incidentEdges(currVertex)) //goes through all end vertices to try and get their degree
            {
              deg = 0;---------erase
              temp = 0; ----------erase
              bestSoFar = 250;----------erase
              
              currIncVertex = g.opposite(currVertex, b); //gets the vertex using the current incident edge and saves it
              currInc = b;
              temp = (int)currIncVertex.get(DEGREE);
              if (temp < bestSoFar && (currentincvert.get(vertex status == FREE)--------edited
              {
                bestIncVertex = currIncVertex;
                bestSoFar = temp; //saves best vertie and lowest degree so far
                bestEdge = currInc;
              }
              else------dont need
              {
                break;
              }
            }


            if (curr vertex.get(VERTEX_STATUS) == MATCHED && g.degree(current vertex) != 0) ----edited
            {
              bestIncVertex.put(VERTEX_STATUS, MATCHED);
              currVertex.put(VERTEX_STATUS, MATCHED);
              bestEdge.put(EDGE_STATUS, MATCHED);
            }
          }

	for(Vertex v : g.vertices()) ------missed this
		{
		heap.add(v);
   		}

had quite a bit missing butthis should solve most problems. good luck


    public void draw ( Graphics screen, AdjacencyListGraph<Point2D.Double,Double> testGraph, int minDimension )
    {
        drawNodes ( screen, testGraph, minDimension );
        drawEdges ( screen, testGraph, minDimension );
    }

    public void drawNodes ( Graphics screen, AdjacencyListGraph<Point2D.Double,Double> graph, int minDimension )
    {
        super.drawNodes(  screen, graph, minDimension );

        // label each vertex in the graph with its degree on the output screen
        for ( Vertex u : graph.vertices() )
        {
            Point2D p = (Point2D) u.element();

            double xPos = p.getX()  *  minDimension;
            double yPos = p.getY()  *  minDimension;

//                         screen.drawString( (u.get(DEGREE)) + "",
//                                 (int)(xPos + 1.5*DOTRADIUS ),
//                                 (int)(yPos + 1.5*DOTRADIUS ) );
        }
    }
}